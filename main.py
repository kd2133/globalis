# Projektstruktur (kommentierte Architektur):
# .
#Globalis/
#‚îú‚îÄ‚îÄ main.py                  # Einstiegspunkt: Berechnet und zeigt den Global Sentiment Index (GSI)
#‚îú‚îÄ‚îÄ app.py                   # Streamlit-App f√ºr Visualisierung (UI)
#‚îú‚îÄ‚îÄ data_loader.py           # L√§dt Daten aus DB, JSON oder CSV
#‚îú‚îÄ‚îÄ gsi_db_setup.py          # Setup-Script f√ºr SQLite-Datenbank (Tabellen, Testdaten)
#‚îú‚îÄ‚îÄ .env                     # API-Schl√ºssel und geheime Konfiguration (nicht ins Git!)
#‚îú‚îÄ‚îÄ requirements.txt         # Liste aller Python-Pakete, die das Projekt braucht
#‚îú‚îÄ‚îÄ README.md                # √úberblick & Anleitung f√ºr Nutzer/Entwickler (GitHub-Visitenkarte)
#‚îú‚îÄ‚îÄ docs/                    # Detaillierte technische Dokumentation (Architektur, Konzepte)
#‚îÇ   ‚îî‚îÄ‚îÄ (z.B. architektur.md, datenfluss.md, to-do.md)
#‚îú‚îÄ‚îÄ models/
#‚îÇ   ‚îú‚îÄ‚îÄ gsi_score.py         # Formel zur Berechnung des Impact Scores
#‚îÇ   ‚îî‚îÄ‚îÄ gsi_weighted.py      # Berechnung des gewichteten globalen GSI
#‚îú‚îÄ‚îÄ utils/
#‚îÇ   ‚îî‚îÄ‚îÄ helpers.py           # Hilfsfunktionen (z.B. f√ºr Berechnungen)
#‚îú‚îÄ‚îÄ data/
#‚îÇ   ‚îú‚îÄ‚îÄ gsi_data.db          # SQLite-Datenbank mit Rohdaten
#‚îÇ   ‚îî‚îÄ‚îÄ historical_data.json # Beispiel-JSON mit historischen Daten
#‚îî‚îÄ‚îÄ venv/                    # Virtuelle Python-Umgebung (lokal, nicht in Git)


# main.py

import sys  # F√ºr Kommandozeilen-Argumente
from data_loader import load_data  # Deine universelle Datenlade-Funktion
from models.gsi_score import calculate_gsi_impact  # Impact Score Formel
from models.gsi_weighted import calculate_weighted_gsi  # Gewichteten GSI berechnen

def main():
    # Standard-Datenquelle, die geladen wird, wenn nichts anderes angegeben ist
    source = 'db'  # M√∂glich: 'db', 'json', 'csv'

    # Pr√ºfe, ob beim Starten ein Argument √ºbergeben wurde (z.B. 'json' oder 'csv')
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()  # Argument in Kleinbuchstaben
        if arg in ('db', 'json', 'csv'):
            source = arg
        else:
            print(f"‚ö†Ô∏è Ung√ºltige Quelle '{arg}' angegeben, verwende Standard 'db'.")

    print(f"üìÇ Datenquelle: {source}")

    # Lade die Daten aus der gew√§hlten Quelle
    data = load_data(source=source)

    # Falls keine Daten geladen wurden, Programm abbrechen
    if not data:
        print("‚ö†Ô∏è Keine Daten geladen, Programm wird beendet.")
        return

    # Berechne Impact Score f√ºr alle Daten, bei denen er fehlt (None)
    for d in data:
        if d['impact_score'] is None:
            result = calculate_gsi_impact(d)
            d['impact_score'] = result.get("Final Impact Score")

    # Berechne den global gewichteten GSI aus allen Impact Scores
    gsi_weighted = calculate_weighted_gsi(data)

    # Ergebnisse ausgeben
    print("\nüåç Global Sentiment Index (weighted):", gsi_weighted)
    print("===========================================")
    for d in data:
        print(f"{d['topic']} ({d['country']}): Impact Score={d['impact_score']}, Social Presence={d['social_presence']}")

if __name__ == "__main__":
    main()


